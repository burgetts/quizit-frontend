{"ast":null,"code":"var _jsxFileName = \"/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/App.js\",\n  _s = $RefreshSig$();\nimport './css/App.css';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport Router from \"./routes/Router\";\nimport { BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport { useLocalStorage } from './utils/hooks';\nimport UserContext from './utils/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [token, setToken] = useLocalStorage('token', null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // on token change, get user info and store in current user\n  useEffect(() => {\n    async function getUser() {\n      try {\n        const payload = jwt.decode(token);\n        const username = payload.username;\n        const user = await axios.get(`/users/${username}`);\n        setCurrentUser(user);\n      } catch {\n        return;\n      }\n    }\n    if (token) getUser();\n  }, [token]);\n\n  // get token, set token state \n  async function login(username, password) {\n    const resp = await axios.post(`auth/token`, {\n      username,\n      password\n    });\n    const token = resp.data.token;\n    setToken(token);\n  }\n\n  // clear user from state and token in localStorage\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  // register new user and store their token in localStorage\n  async function signup(user) {\n    const token = await JoblyApi.register(user);\n    if (!token) return;\n    setToken(token);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n        value: {\n          login,\n          logout,\n          signup,\n          currentUser,\n          setCurrentUser,\n          token\n        },\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Router, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M50fWskUCjzcLcGN+NzrUAXv9pk=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jwt","axios","React","useState","useEffect","Router","BrowserRouter","Navbar","useLocalStorage","UserContext","jsxDEV","_jsxDEV","App","_s","token","setToken","currentUser","setCurrentUser","getUser","payload","decode","username","user","get","login","password","resp","post","data","logout","signup","JoblyApi","register","className","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/App.js"],"sourcesContent":["import './css/App.css';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport React, { useState, useEffect} from 'react';\nimport Router from \"./routes/Router\";\nimport { BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport { useLocalStorage } from './utils/hooks';\nimport UserContext from './utils/UserContext';\n\nfunction App() {\n    const [token, setToken] = useLocalStorage('token', null)\n    const [currentUser, setCurrentUser] = useState(null)\n  \n    // on token change, get user info and store in current user\n    useEffect(() => {\n      async function getUser() {\n        try {\n          const payload = jwt.decode(token)\n          const username = payload.username\n          const user = await axios.get(`/users/${username}`)\n          setCurrentUser(user)\n        } catch {\n          return\n        }\n      }\n      if (token) getUser()\n    }, [token])\n  \n   // get token, set token state \n   async function login(username, password) {\n      const resp = await axios.post(`auth/token`, {username, password})\n      const token = resp.data.token\n      setToken(token)\n    }\n  \n    // clear user from state and token in localStorage\n    function logout() {\n      setCurrentUser(null)\n      setToken(null)\n    }\n  \n    // register new user and store their token in localStorage\n    async function signup(user) {\n      const token = await JoblyApi.register(user)\n      if (!token) return\n      setToken(token)\n     }\n  return (\n    <div className=\"App\">\n        <BrowserRouter>\n            <UserContext.Provider value={{login, logout, signup, currentUser, setCurrentUser, token}}>\n                <Navbar />\n                <Router />\n            </UserContext.Provider>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,eAAe;AACtB,OAAOA,GAAG,MAAM,cAAc;AAC9B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,eAAe,QAAQ,eAAe;AAC/C,OAAOC,WAAW,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC;EACxD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,eAAec,OAAOA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,OAAO,GAAGnB,GAAG,CAACoB,MAAM,CAACN,KAAK,CAAC;QACjC,MAAMO,QAAQ,GAAGF,OAAO,CAACE,QAAQ;QACjC,MAAMC,IAAI,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAE,UAASF,QAAS,EAAC,CAAC;QAClDJ,cAAc,CAACK,IAAI,CAAC;MACtB,CAAC,CAAC,MAAM;QACN;MACF;IACF;IACA,IAAIR,KAAK,EAAEI,OAAO,EAAE;EACtB,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;;EAEZ;EACA,eAAeU,KAAKA,CAACH,QAAQ,EAAEI,QAAQ,EAAE;IACtC,MAAMC,IAAI,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAE,YAAW,EAAE;MAACN,QAAQ;MAAEI;IAAQ,CAAC,CAAC;IACjE,MAAMX,KAAK,GAAGY,IAAI,CAACE,IAAI,CAACd,KAAK;IAC7BC,QAAQ,CAACD,KAAK,CAAC;EACjB;;EAEA;EACA,SAASe,MAAMA,CAAA,EAAG;IAChBZ,cAAc,CAAC,IAAI,CAAC;IACpBF,QAAQ,CAAC,IAAI,CAAC;EAChB;;EAEA;EACA,eAAee,MAAMA,CAACR,IAAI,EAAE;IAC1B,MAAMR,KAAK,GAAG,MAAMiB,QAAQ,CAACC,QAAQ,CAACV,IAAI,CAAC;IAC3C,IAAI,CAACR,KAAK,EAAE;IACZC,QAAQ,CAACD,KAAK,CAAC;EAChB;EACH,oBACEH,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBvB,OAAA,CAACL,aAAa;MAAA4B,QAAA,eACVvB,OAAA,CAACF,WAAW,CAAC0B,QAAQ;QAACC,KAAK,EAAE;UAACZ,KAAK;UAAEK,MAAM;UAAEC,MAAM;UAAEd,WAAW;UAAEC,cAAc;UAAEH;QAAK,CAAE;QAAAoB,QAAA,gBACrFvB,OAAA,CAACJ,MAAM;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eACV7B,OAAA,CAACN,MAAM;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACd;AAEV;AAAC3B,EAAA,CAhDQD,GAAG;EAAA,QACkBJ,eAAe;AAAA;AAAAiC,EAAA,GADpC7B,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}