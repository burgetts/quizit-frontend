{"ast":null,"code":"var _jsxFileName = \"/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/components/UserSets.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport UserContext from '../utils/UserContext';\nimport '../css/UserSets.css';\nimport SetCard from './SetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserSets = () => {\n  _s();\n  const {\n    currentUser,\n    setCurrentUser,\n    request\n  } = useContext(UserContext);\n  const [sets, setSets] = useState(currentUser.sets);\n  const setState = {\n    sets,\n    setSets\n  };\n\n  // useEffect(() => {\n  //     const refreshUser = async () => {\n  //         const resp = await request(`users/${currentUser.username}`)\n  //         setCurrentUser(resp.user)\n  //         setSets(currentUser.sets)\n  //     }\n  //     refreshUser()\n  // }, [sets])\n\n  //\n  // const sets = currentUser.sets\n  // how to update when new set is created and deleted?\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"NewSetCard\",\n      children: /*#__PURE__*/_jsxDEV(NavLink, {\n        state: {\n          setState\n        },\n        to: \"/flashcards/sets/new\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"NewSetButton\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"NewSetText\",\n          children: \"Create a new set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: sets.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"NoNewSets\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"No sets yet!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this) : sets.map(s => /*#__PURE__*/_jsxDEV(SetCard, {\n        set: s\n      }, s.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 31\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UserSets, \"7R43fjadxV2TQ0bFGpWEnjsA6gg=\");\n_c = UserSets;\nexport default UserSets;\nvar _c;\n$RefreshReg$(_c, \"UserSets\");","map":{"version":3,"names":["React","useContext","useState","useEffect","NavLink","UserContext","SetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","UserSets","_s","currentUser","setCurrentUser","request","sets","setSets","setState","children","className","state","to","fileName","_jsxFileName","lineNumber","columnNumber","length","map","s","set","id","_c","$RefreshReg$"],"sources":["/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/components/UserSets.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport UserContext from '../utils/UserContext';\nimport '../css/UserSets.css';\nimport SetCard from './SetCard';\n\n\nconst UserSets = () => {\n    const { currentUser, setCurrentUser, request } = useContext(UserContext)\n    const [sets, setSets] = useState(currentUser.sets)\n    const setState = {sets, setSets}\n\n    // useEffect(() => {\n    //     const refreshUser = async () => {\n    //         const resp = await request(`users/${currentUser.username}`)\n    //         setCurrentUser(resp.user)\n    //         setSets(currentUser.sets)\n    //     }\n    //     refreshUser()\n    // }, [sets])\n    \n    //\n    // const sets = currentUser.sets\n    // how to update when new set is created and deleted?\n    return (\n        <>\n            <div className=\"NewSetCard\">\n                <NavLink state={{setState}} to=\"/flashcards/sets/new\">\n                    <button className=\"NewSetButton\">+</button>\n                    <p className=\"NewSetText\" >Create a new set</p>\n                </NavLink>\n            </div>\n            <div>\n                {sets.length === 0 ? \n                <p className=\"NoNewSets\"><i>No sets yet!</i></p>\n                :\n                sets.map(s => <SetCard key={s.id} set={s} />)}\n            </div>\n        </>\n    )\n}\n\nexport default UserSets;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAO,qBAAqB;AAC5B,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC,WAAW;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGd,UAAU,CAACI,WAAW,CAAC;EACxE,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACW,WAAW,CAACG,IAAI,CAAC;EAClD,MAAME,QAAQ,GAAG;IAACF,IAAI;IAAEC;EAAO,CAAC;;EAEhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,oBACIT,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACIX,OAAA;MAAKY,SAAS,EAAC,YAAY;MAAAD,QAAA,eACvBX,OAAA,CAACJ,OAAO;QAACiB,KAAK,EAAE;UAACH;QAAQ,CAAE;QAACI,EAAE,EAAC,sBAAsB;QAAAH,QAAA,gBACjDX,OAAA;UAAQY,SAAS,EAAC,cAAc;UAAAD,QAAA,EAAC;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAC3ClB,OAAA;UAAGY,SAAS,EAAC,YAAY;UAAAD,QAAA,EAAE;QAAgB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACzC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACR,eACNlB,OAAA;MAAAW,QAAA,EACKH,IAAI,CAACW,MAAM,KAAK,CAAC,gBAClBnB,OAAA;QAAGY,SAAS,EAAC,WAAW;QAAAD,QAAA,eAACX,OAAA;UAAAW,QAAA,EAAG;QAAY;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,GAEhDV,IAAI,CAACY,GAAG,CAACC,CAAC,iBAAIrB,OAAA,CAACF,OAAO;QAAYwB,GAAG,EAAED;MAAE,GAAbA,CAAC,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3C;EAAA,gBACP;AAEX,CAAC;AAAAd,EAAA,CAjCKD,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}