{"ast":null,"code":"var _jsxFileName = \"/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/components/GroupSets.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport UserContext from '../utils/UserContext';\nimport GroupSetCard from './GroupSetCard';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupSets = _ref => {\n  _s();\n  let {\n    groupId\n  } = _ref;\n  const [sets, setSets] = useState();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showingSets, setShowingSets] = useState([]);\n  const {\n    request\n  } = useContext(UserContext);\n  useEffect(() => {\n    const getSets = async () => {\n      const resp = await request(`groups/${groupId}/sets`);\n      const groupSets = resp.sets;\n      setSets(groupSets);\n      setShowingSets(groupSets);\n    };\n    getSets();\n  }, []);\n  useEffect(() => {\n    if (sets) {\n      const setsToShow = sets.filter(s => s.name.toLowerCase().startsWith(searchTerm.toLowerCase()));\n      setShowingSets(setsToShow);\n    }\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      searchTerm: searchTerm,\n      setSearchTerm: setSearchTerm,\n      text: \"Search for group set by name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"NewSetCard\",\n      children: /*#__PURE__*/_jsxDEV(NavLink, {\n        to: `/groups/${groupId}/sets/new`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"NewSetButton\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"NewSetText\",\n          children: \"Create a new set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), sets ? sets.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: showingSets.map(s => /*#__PURE__*/_jsxDEV(GroupSetCard, {\n        set: s,\n        groupId: groupId\n      }, s.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 47\n      }, this))\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"No sets yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(GroupSets, \"cBTaKajAruF1kJPvb6xX1kKoCTk=\");\n_c = GroupSets;\nexport default GroupSets;\nvar _c;\n$RefreshReg$(_c, \"GroupSets\");","map":{"version":3,"names":["React","useState","useEffect","useContext","NavLink","UserContext","GroupSetCard","Search","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupSets","_ref","_s","groupId","sets","setSets","searchTerm","setSearchTerm","showingSets","setShowingSets","request","getSets","resp","groupSets","setsToShow","filter","s","name","toLowerCase","startsWith","children","text","fileName","_jsxFileName","lineNumber","columnNumber","className","to","length","map","set","id","_c","$RefreshReg$"],"sources":["/Users/stevieburgett/Documents/Springboard/capstone-2/frontend/quizit/src/components/GroupSets.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport UserContext from '../utils/UserContext';\nimport GroupSetCard from './GroupSetCard';\nimport Search from './Search';\n\nconst GroupSets = ({groupId}) => {\n    const [sets, setSets] = useState()\n    const [searchTerm, setSearchTerm] = useState('')\n    const [showingSets, setShowingSets] = useState([])\n    const { request } = useContext(UserContext)\n\n    useEffect(() => {\n        const getSets = async () => {\n            const resp = await request(`groups/${groupId}/sets`)\n            const groupSets = resp.sets\n            setSets(groupSets)\n            setShowingSets(groupSets)\n        }\n        getSets()\n    }, [])\n\n    useEffect(() => {\n        if (sets){\n            const setsToShow = sets.filter(s => s.name.toLowerCase().startsWith(searchTerm.toLowerCase()))\n            setShowingSets(setsToShow)\n        }\n    }, [searchTerm])\n    return (\n        <>\n            <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} text=\"Search for group set by name\" />\n            <div className=\"NewSetCard\">\n                <NavLink to={`/groups/${groupId}/sets/new`}>\n                    <button className=\"NewSetButton\">+</button>\n                    <p className=\"NewSetText\" >Create a new set</p>\n                </NavLink>\n            </div>\n            {sets \n                ?\n                sets.length > 0\n                    ?\n                    <>\n                        {showingSets.map(s => <GroupSetCard key={s.id} set={s} groupId={groupId} />)}\n                    </>\n                    :\n                    <h1>No sets yet!</h1>\n                :\n                <h1>Loading...</h1>\n            }\n        </>\n    )\n}\n\nexport default GroupSets;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,SAAS,GAAGC,IAAA,IAAe;EAAAC,EAAA;EAAA,IAAd;IAACC;EAAO,CAAC,GAAAF,IAAA;EACxB,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,EAAE;EAClC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM;IAAEqB;EAAQ,CAAC,GAAGnB,UAAU,CAACE,WAAW,CAAC;EAE3CH,SAAS,CAAC,MAAM;IACZ,MAAMqB,OAAO,GAAG,MAAAA,CAAA,KAAY;MACxB,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAAE,UAASP,OAAQ,OAAM,CAAC;MACpD,MAAMU,SAAS,GAAGD,IAAI,CAACR,IAAI;MAC3BC,OAAO,CAACQ,SAAS,CAAC;MAClBJ,cAAc,CAACI,SAAS,CAAC;IAC7B,CAAC;IACDF,OAAO,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,MAAM;IACZ,IAAIc,IAAI,EAAC;MACL,MAAMU,UAAU,GAAGV,IAAI,CAACW,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,UAAU,CAACb,UAAU,CAACY,WAAW,EAAE,CAAC,CAAC;MAC9FT,cAAc,CAACK,UAAU,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAChB,oBACIT,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACIvB,OAAA,CAACF,MAAM;MAACW,UAAU,EAAEA,UAAW;MAACC,aAAa,EAAEA,aAAc;MAACc,IAAI,EAAC;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACpG5B,OAAA;MAAK6B,SAAS,EAAC,YAAY;MAAAN,QAAA,eACvBvB,OAAA,CAACL,OAAO;QAACmC,EAAE,EAAG,WAAUxB,OAAQ,WAAW;QAAAiB,QAAA,gBACvCvB,OAAA;UAAQ6B,SAAS,EAAC,cAAc;UAAAN,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAC3C5B,OAAA;UAAG6B,SAAS,EAAC,YAAY;UAAAN,QAAA,EAAE;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACzC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACR,EACLrB,IAAI,GAEDA,IAAI,CAACwB,MAAM,GAAG,CAAC,gBAEX/B,OAAA,CAAAE,SAAA;MAAAqB,QAAA,EACKZ,WAAW,CAACqB,GAAG,CAACb,CAAC,iBAAInB,OAAA,CAACH,YAAY;QAAYoC,GAAG,EAAEd,CAAE;QAACb,OAAO,EAAEA;MAAQ,GAA/Ba,CAAC,CAACe,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA8B;IAAC,iBAC7E,gBAEH5B,OAAA;MAAAuB,QAAA,EAAI;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,gBAEzB5B,OAAA;MAAAuB,QAAA,EAAI;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAAA,gBAExB;AAEX,CAAC;AAAAvB,EAAA,CA7CKF,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}